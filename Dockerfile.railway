# Railway-optimized Dockerfile for Laravel Transactix with FrankenPHP
FROM dunglas/frankenphp:latest

# Install system dependencies and PHP extensions
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    && docker-php-ext-install pdo pdo_pgsql mbstring exif pcntl bcmath gd \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /app

# Copy composer files first for better caching
COPY composer.json composer.lock ./

# Install PHP dependencies
RUN composer install --optimize-autoloader --no-dev --no-scripts --no-interaction

# Copy application code
COPY . .

# Copy Caddyfile for Railway
COPY Caddyfile.railway /etc/caddy/Caddyfile

# Create a temporary .env file for build process (before any artisan commands)
RUN echo "APP_KEY=" > .env \
    && echo "APP_ENV=production" >> .env \
    && echo "APP_DEBUG=false" >> .env \
    && echo "LOG_CHANNEL=stderr" >> .env \
    && echo "DB_CONNECTION=sqlite" >> .env \
    && echo "SESSION_DRIVER=file" >> .env \
    && echo "CACHE_STORE=file" >> .env

# Set proper permissions
RUN chown -R www-data:www-data /app \
    && chmod -R 755 /app/storage \
    && chmod -R 755 /app/bootstrap/cache \
    && chmod +x /app/artisan

# Run composer scripts
RUN composer run-script post-autoload-dump

# Generate application key
RUN php artisan key:generate --force

# Run Laravel optimizations (skip config cache since we don't have all env vars)
RUN php artisan route:cache \
    && php artisan view:cache

# Create storage link
RUN php artisan storage:link

# Remove temporary .env file (Railway will provide the real one)
RUN rm .env

# Expose port (Railway will assign the PORT environment variable)
EXPOSE $PORT

# Create startup script to handle runtime optimizations
RUN echo '#!/bin/bash\n\
# Runtime optimizations with actual environment variables\n\
php artisan config:cache 2>/dev/null || true\n\
php artisan optimize 2>/dev/null || true\n\
\n\
# Start FrankenPHP\n\
exec frankenphp run --config /etc/caddy/Caddyfile --listen :${PORT:-80}\n\
' > /app/start.sh && chmod +x /app/start.sh

# Start with the startup script
CMD ["/app/start.sh"]
